/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./ts/buttonClicked.ts":
/*!*****************************!*\
  !*** ./ts/buttonClicked.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*

    BUTTON - CLICKED
    author: Jiří Bělský (wUFr)

    Tiny library that updates button status after its clicked.
    Can be used to prevent double-submit on forms and show user a form is being sent, if request is slow

*/
Object.defineProperty(exports, "__esModule", { value: true });
class buttonClicked {
    constructor(buttonClass = "js-button-click-watch", buttonResetClass = "js-button-click-reset", debug = false) {
        this.buttonClass = buttonClass;
        this.buttonElements = document.getElementsByClassName(this.buttonClass);
        this.buttonResetClass = buttonResetClass;
        this.buttonResetElements = document.getElementsByClassName(this.buttonResetClass);
        this.debug = debug;
    }
    initButtons() {
        // CHECK IF THERE ARE ANY ELEMENTS
        if (!this.buttonElements.length) {
            if (this.debug) {
                console.log("buttonClicked - initButtons(): No elements found, try checking your classnames (used classname: ." + this.buttonClass + ")");
            }
            return;
        }
        if (this.debug) {
            console.log("buttonClicked - initButtons(): Found elements", this.buttonElements);
        }
        // ADD EVEN ON EACH OF THEM (IF NOT ALREADY INITIALIZED)
        for (const button of this.buttonElements) {
            // PREVENT DOUBLE-INIT WHICH WOULD RESULT IN CALLING THIS CODE TWICE OR MORE
            if (button.classList.contains("-js-button-click-init")) {
                continue;
            }
            button.classList.add("-js-button-click-init");
            if (this.debug) {
                console.log("buttonClicked - initButtons(): init", button);
            }
            button.addEventListener("click", () => {
                // SET DEFAULT STATE CLASS
                button.classList.add("js-button-click-active");
                // SET CUSTOM CLASS IF SET
                const customClass = button.getAttribute("data-active-class");
                if (customClass) {
                    button.classList.add(customClass);
                }
                // SET ARIA ATTRIBUTE IF SET
                const ariaState = button.getAttribute("aria-pressed");
                if (ariaState) {
                    button.setAttribute("aria-pressed", "true");
                }
                if (this.debug) {
                    console.log("buttonClicked - set ACTIVE ", button);
                }
            });
        }
    }
    // REMOVES "ACTIVE" CLASS AND SETS ARIA-PRESSED TO "FALSE"
    initResetButtons() {
        if (!this.buttonResetElements.length) {
            if (this.debug) {
                console.log("buttonClicked - resetState(): No elements found, try checking your classnames (used classname: ." + this.buttonResetElements + ")");
            }
            return;
        }
        if (this.debug) {
            console.log("buttonClicked  - resetState(): Found elements", this.buttonResetElements);
        }
        for (const resetButton of this.buttonResetElements) {
            // PREVENT DOUBLE-INIT WHICH WOULD RESULT IN CALLING THIS CODE TWICE OR MORE
            if (resetButton.classList.contains("-js-button-click-init")) {
                continue;
            }
            resetButton.classList.add("-js-button-click-init");
            if (this.debug) {
                console.log("buttonClicked - resetState(): init reset", resetButton);
            }
            resetButton.addEventListener("click", () => {
                if (this.buttonElements.length) {
                    for (const button of this.buttonElements) {
                        if (!button.classList.contains("js-button-click-active")) {
                            continue;
                        }
                        // RESET DEFAULT STATE CLASS
                        button.classList.remove("js-button-click-active");
                        // RESET CUSTOM CLASS, IF ANY IS SET
                        const customClass = button.getAttribute("data-active-class");
                        if (customClass) {
                            button.classList.remove(customClass);
                        }
                        // RESET ARIA ATTRIBUTE IF SET
                        const ariaState = button.getAttribute("aria-pressed");
                        if (ariaState) {
                            button.setAttribute("aria-pressed", "false");
                        }
                        if (this.debug) {
                            console.log("buttonClicked - set DEFAULT ", button);
                        }
                    }
                }
                else {
                    if (this.debug) {
                        console.log("buttonClicked  - resetState(): No buttons to reset found");
                    }
                }
            });
        }
    }
}
exports.default = buttonClicked;


/***/ }),

/***/ 0:
/*!***********************************!*\
  !*** multi ./ts/buttonClicked.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /var/www/clients/client1/web104/web/ts/buttonClicked.ts */"./ts/buttonClicked.ts");


/***/ })

/******/ });